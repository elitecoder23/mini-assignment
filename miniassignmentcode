package mini;

/**
 * Utility class with static methods for loop practice.
 */
public class LoopsInfinityAndBeyond {

	/**
	 * Private constructor to disable instantiation.
	 */
	private LoopsInfinityAndBeyond() {
	}

	/**
	 * Define a flying saucer as the following string pattern: one ‘(‘, followed by
	 * zero to many ‘=’, followed by one ‘)’. Write a Java method that, given a
	 * string find the first instance of a flying saucer (starting from the left)
	 * and return its length. If no flying saucer exists return 0.
	 * <p>
	 * For example: Given: "(==)" Return: 4
	 * <p>
	 * Given: "***()**(===)" Return: 2
	 * <p>
	 * Given: "****(***)" Return: 0
	 * 
	 * @param source input string
	 * @return the length
	 */
	public static int flyingSaucerLength(String s) {
	    int count = 0;
	    int start = -1;
	    
	    for (int i = 0; i < s.length(); i++) {
	        if (s.charAt(i) == '(') {
	            count = 1;
	            start = i;
	            
	            if (s.charAt(i + 1) != '=' && s.charAt(i + 1) != ')') {
	                count = 0;
	                break;
	            }
	        } else if (s.charAt(i) == ')') {
	            if (count > 0) {
	                return i - start + 1;
	            }
	        } else if (s.charAt(i) == '=') {
	            count++;
	        }
	    }
	    
	    return count;
	}


	/**
	 * Write a Java method that, given a string which many contain a flying saucer
	 * broken into two parts with characters in between, return a string where the
	 * flying is fixed by removing the in between characters. Look for the two parts
	 * of the flying saucer from left to right and fix the saucer with the first
	 * available parts.
	 * <p>
	 * For example:
	 * Given: ***(==****===)***
	 * Return: ***(=====)***
	 * <p>
	 * Given: ***(==****)**=)*
	 * Return: ***(==)**=)*
	 * <p>
	 * Given: ***(==)**
	 * Return: ***(==)**
	 * 
	 * @param s
	 * @return
	 */
	public static String fixFlyingSaucer(String s) {
	    int openingBracketIndex = s.indexOf('(');
	    
	    int closingBracketIndex = s.indexOf(')');
	    
	    if (openingBracketIndex == -1 || closingBracketIndex == -1) {
	        return s;
	    }
	    String betweenBrackets = s.substring(openingBracketIndex + 1, closingBracketIndex);
	    String newBetweenBrackets = betweenBrackets.replaceAll("[^=]", "");
	    return s.substring(0, openingBracketIndex + 1) + newBetweenBrackets + s.substring(closingBracketIndex);
	}


	/**
	 * Write a Java method that, given a string which many contain many flying
	 * saucers, return the number of flying saucers. For this problem a flying
	 * saucer may wrap around from the right side of the string to the left.
	 * <p>
	 * For example:
	 * Given: ***(===)***
	 * Return: 1
	 * <p>
	 * Given: =)**(==)**(
	 * Return: 2
	 * <p>
	 * Given: ***(=*=)**
	 * Return: 0
	 * 
	 * @param s
	 * @return
	 */
	public static int countFlyingSaucers(String str) {
	    int saucerCount;
	    int totalSaucerCount;
	    
	    saucerCount = 0;
	    totalSaucerCount = 0;
	    
	    int i = 0;
	    while (i < str.length()) {
	        if (str.charAt(i) == '(') {
	            int j = i + 1;
	            while (j < str.length() && str.charAt(j) == '=') {
	                j++;
	            }
	            if (j < str.length() && str.charAt(j) == ')') {
	                saucerCount++;
	                i = j + 1;
	            } else {
	                i++;
	            }
	        } else {
	            i++;
	        }
	    }

	    String longStr = str + str;

	    int k = 0;
	    while (k < longStr.length()) {
	        if (longStr.charAt(k) == '(') {
	            int j = k + 1;
	            while (j < longStr.length() && longStr.charAt(j) == '=') {
	                j++;
	            }
	            if (j < longStr.length() && longStr.charAt(j) == ')') {
	                totalSaucerCount++;
	                k = j + 1;
	            } else {
	                k++;
	            }
	        } else {
	            k++;
	        }
	    }
	    
	    return totalSaucerCount - saucerCount;
	}


	/**
	 * Write a Java method that, given a string which many contain many flying
	 * saucers, shifts all of the saucers one character to the right. For this
	 * problem a flying saucer may wrap around from the right side of the string to
	 * the left. The returned string should have the same number of characters as
	 * the given string. This is achieved by moving the character to the right of a
	 * saucer to its left. It can be assumed that saucers will never be touching
	 * each other (i.e., there will always be at least one character between any two
	 * saucers). Also, a saucer will not touch itself (e.g., "=)(=").
	 * <p>
	 * For example:
	 * Given: ***(===)***
	 * Return: ****(===)**
	 * <p>
	 * Given: =)**(==)**(
	 * Return: (=)***(==)*
	 * <p>
	 * Given: a()bcde(=*=)fg
	 * Return: ab()cde(=*=)fg
	 * 
	 * @param s
	 * @return
	 */
	public static String flyingSaucersFly(String input) {
	    int openCount = 0;
	    int numSpaces = 0;
	    int characterCount = 0;
	    int openIndex = -1;
	    int closeIndex = 0;
	    String flyingSaucer = "";
	    String temp = "";
	    
	    for (int i = 0; i < input.length(); i++) {
	        char currentChar = input.charAt(i);
	        
	        if (currentChar == '(') {
	            openCount++;
	            openIndex = 1;
	            
	            if (input.charAt(i + 1) == ')') {
	                openCount++;
	                closeIndex = i + 1;
	                temp = input.substring(openIndex, closeIndex + 1);
	                flyingSaucer = input.substring(0, openIndex) + input.substring(closeIndex + 1, closeIndex + 2) + temp + input.substring(closeIndex + 2);
	                break;
	            }
	        } else if (currentChar == ')') {
	            openCount++;
	            closeIndex = i;
	            
	            if (openCount >= 1 && characterCount == 0 && numSpaces != 1) {
	                temp = input.substring(input.length() - 1);
	                flyingSaucer = temp + input.substring(0, input.length() - 1);
	                break;
	            } else if (openCount >= 1 && numSpaces == 1) {
	                temp = input.substring(openIndex, closeIndex + 1);
	                flyingSaucer = input.substring(0, openIndex) + input.substring(closeIndex + 1, closeIndex + 2) + temp + input.substring(closeIndex + 2);
	                break;
	            }
	        } else if (currentChar == '=') {
	            openCount++;
	        } else if (currentChar != ' ') {
	            if (openCount > 1) {
	                characterCount = 0;
	            } else if (openCount < 1) {
	                numSpaces += 1;
	            } else {
	                characterCount += 1;
	            }
	        }
	    }
	    
	    return flyingSaucer;
	}


}
